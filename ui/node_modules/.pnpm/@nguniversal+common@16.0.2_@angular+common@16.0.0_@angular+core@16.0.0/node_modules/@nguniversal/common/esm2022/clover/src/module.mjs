/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { DOCUMENT, ɵPLATFORM_SERVER_ID as PLATFORM_SERVER_ID } from '@angular/common';
import { APP_ID, ApplicationRef, Inject, NgModule, Optional, PLATFORM_ID, TransferState, } from '@angular/core';
import { BrowserModule, ɵSharedStylesHost as SharedStylesHost } from '@angular/platform-browser';
import { filter, mapTo, take } from 'rxjs/operators';
import { SSRStylesHost } from './styles_host';
import * as i0 from "@angular/core";
/**
 * @deprecated This experimental API will be removed in version 16.
 * @experimental
 */
class RendererModule {
    constructor(applicationRef, transferState, appId) {
        this.applicationRef = applicationRef;
        this.transferState = transferState;
        this.appId = appId;
        if (typeof ngRenderMode !== 'undefined' && ngRenderMode) {
            ngRenderMode = {
                getSerializedState: () => this.transferState ? escapeHtml(this.transferState.toJson()) : undefined,
                appId: this.appId,
                getWhenStable: () => this.applicationRef.isStable
                    .pipe(filter((isStable) => isStable), take(1), mapTo(undefined))
                    .toPromise(),
            };
        }
    }
    static forRoot() {
        return {
            ngModule: RendererModule,
            providers: [
                ...(typeof ngRenderMode !== 'undefined' && ngRenderMode
                    ? [
                        { provide: PLATFORM_ID, useValue: PLATFORM_SERVER_ID },
                        { provide: SSRStylesHost, useClass: SSRStylesHost, deps: [DOCUMENT, APP_ID] },
                    ]
                    : [{ provide: SSRStylesHost, useClass: SSRStylesHost, deps: [DOCUMENT] }]),
                { provide: SharedStylesHost, useExisting: SSRStylesHost },
            ],
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.0-rc.2", ngImport: i0, type: RendererModule, deps: [{ token: i0.ApplicationRef }, { token: i0.TransferState, optional: true }, { token: APP_ID, optional: true }], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.0.0-rc.2", ngImport: i0, type: RendererModule, exports: [BrowserModule] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.0.0-rc.2", ngImport: i0, type: RendererModule, imports: [BrowserModule] }); }
}
export { RendererModule };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.0-rc.2", ngImport: i0, type: RendererModule, decorators: [{
            type: NgModule,
            args: [{
                    exports: [BrowserModule],
                    imports: [],
                    providers: [],
                }]
        }], ctorParameters: function () { return [{ type: i0.ApplicationRef }, { type: i0.TransferState, decorators: [{
                    type: Optional
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [APP_ID]
                }] }]; } });
function escapeHtml(text) {
    const escapedText = {
        '&': '&a;',
        '"': '&q;',
        "'": '&s;',
        '<': '&l;',
        '>': '&g;',
    };
    return text.replace(/[&"'<>]/g, (s) => escapedText[s]);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbW9kdWxlcy9jb21tb24vY2xvdmVyL3NyYy9tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBRUgsT0FBTyxFQUFFLFFBQVEsRUFBRSxtQkFBbUIsSUFBSSxrQkFBa0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3RGLE9BQU8sRUFDTCxNQUFNLEVBQ04sY0FBYyxFQUNkLE1BQU0sRUFFTixRQUFRLEVBQ1IsUUFBUSxFQUNSLFdBQVcsRUFDWCxhQUFhLEdBQ2QsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLGFBQWEsRUFBRSxpQkFBaUIsSUFBSSxnQkFBZ0IsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ2pHLE9BQU8sRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBVTlDOzs7R0FHRztBQUVILE1BS2EsY0FBYztJQUN6QixZQUNVLGNBQThCLEVBQ2xCLGFBQTZCLEVBQ2IsS0FBYztRQUYxQyxtQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7UUFDbEIsa0JBQWEsR0FBYixhQUFhLENBQWdCO1FBQ2IsVUFBSyxHQUFMLEtBQUssQ0FBUztRQUVsRCxJQUFJLE9BQU8sWUFBWSxLQUFLLFdBQVcsSUFBSSxZQUFZLEVBQUU7WUFDdkQsWUFBWSxHQUFHO2dCQUNiLGtCQUFrQixFQUFFLEdBQUcsRUFBRSxDQUN2QixJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTO2dCQUMxRSxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUs7Z0JBQ2pCLGFBQWEsRUFBRSxHQUFHLEVBQUUsQ0FDbEIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxRQUFRO3FCQUN6QixJQUFJLENBQ0gsTUFBTSxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsRUFDOUIsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUNQLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FDakI7cUJBQ0EsU0FBUyxFQUFFO2FBQ2pCLENBQUM7U0FDSDtJQUNILENBQUM7SUFFRCxNQUFNLENBQUMsT0FBTztRQUNaLE9BQU87WUFDTCxRQUFRLEVBQUUsY0FBYztZQUN4QixTQUFTLEVBQUU7Z0JBQ1QsR0FBRyxDQUFDLE9BQU8sWUFBWSxLQUFLLFdBQVcsSUFBSSxZQUFZO29CQUNyRCxDQUFDLENBQUM7d0JBQ0UsRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFLFFBQVEsRUFBRSxrQkFBa0IsRUFBRTt3QkFDdEQsRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFFLFFBQVEsRUFBRSxhQUFhLEVBQUUsSUFBSSxFQUFFLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxFQUFFO3FCQUM5RTtvQkFDSCxDQUFDLENBQUMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxhQUFhLEVBQUUsUUFBUSxFQUFFLGFBQWEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7Z0JBQzVFLEVBQUUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFdBQVcsRUFBRSxhQUFhLEVBQUU7YUFDMUQ7U0FDRixDQUFDO0lBQ0osQ0FBQzttSEFwQ1UsY0FBYyw2RkFJSCxNQUFNO29IQUpqQixjQUFjLFlBSmYsYUFBYTtvSEFJWixjQUFjLFlBSmYsYUFBYTs7U0FJWixjQUFjO2dHQUFkLGNBQWM7a0JBTDFCLFFBQVE7bUJBQUM7b0JBQ1IsT0FBTyxFQUFFLENBQUMsYUFBYSxDQUFDO29CQUN4QixPQUFPLEVBQUUsRUFBRTtvQkFDWCxTQUFTLEVBQUUsRUFBRTtpQkFDZDs7MEJBSUksUUFBUTs7MEJBQ1IsUUFBUTs7MEJBQUksTUFBTTsyQkFBQyxNQUFNOztBQW1DOUIsU0FBUyxVQUFVLENBQUMsSUFBWTtJQUM5QixNQUFNLFdBQVcsR0FBNEI7UUFDM0MsR0FBRyxFQUFFLEtBQUs7UUFDVixHQUFHLEVBQUUsS0FBSztRQUNWLEdBQUcsRUFBRSxLQUFLO1FBQ1YsR0FBRyxFQUFFLEtBQUs7UUFDVixHQUFHLEVBQUUsS0FBSztLQUNYLENBQUM7SUFFRixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN6RCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7IERPQ1VNRU5ULCDJtVBMQVRGT1JNX1NFUlZFUl9JRCBhcyBQTEFURk9STV9TRVJWRVJfSUQgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHtcbiAgQVBQX0lELFxuICBBcHBsaWNhdGlvblJlZixcbiAgSW5qZWN0LFxuICBNb2R1bGVXaXRoUHJvdmlkZXJzLFxuICBOZ01vZHVsZSxcbiAgT3B0aW9uYWwsXG4gIFBMQVRGT1JNX0lELFxuICBUcmFuc2ZlclN0YXRlLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJyb3dzZXJNb2R1bGUsIMm1U2hhcmVkU3R5bGVzSG9zdCBhcyBTaGFyZWRTdHlsZXNIb3N0IH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5pbXBvcnQgeyBmaWx0ZXIsIG1hcFRvLCB0YWtlIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgU1NSU3R5bGVzSG9zdCB9IGZyb20gJy4vc3R5bGVzX2hvc3QnO1xuXG5leHBvcnQgaW50ZXJmYWNlIE5HUmVuZGVyTW9kZUFQSSB7XG4gIGdldFNlcmlhbGl6ZWRTdGF0ZTogKCkgPT4gc3RyaW5nIHwgdW5kZWZpbmVkO1xuICBnZXRXaGVuU3RhYmxlOiAoKSA9PiBQcm9taXNlPHZvaWQ+O1xuICBhcHBJZD86IHN0cmluZztcbn1cblxuZXhwb3J0IHR5cGUgTkdSZW5kZXJNb2RlID0gYm9vbGVhbiB8IHVuZGVmaW5lZCB8IE5HUmVuZGVyTW9kZUFQSTtcbmRlY2xhcmUgbGV0IG5nUmVuZGVyTW9kZTogTkdSZW5kZXJNb2RlO1xuLyoqXG4gKiBAZGVwcmVjYXRlZCBUaGlzIGV4cGVyaW1lbnRhbCBBUEkgd2lsbCBiZSByZW1vdmVkIGluIHZlcnNpb24gMTYuXG4gKiBAZXhwZXJpbWVudGFsXG4gKi9cblxuQE5nTW9kdWxlKHtcbiAgZXhwb3J0czogW0Jyb3dzZXJNb2R1bGVdLFxuICBpbXBvcnRzOiBbXSxcbiAgcHJvdmlkZXJzOiBbXSxcbn0pXG5leHBvcnQgY2xhc3MgUmVuZGVyZXJNb2R1bGUge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGFwcGxpY2F0aW9uUmVmOiBBcHBsaWNhdGlvblJlZixcbiAgICBAT3B0aW9uYWwoKSBwcml2YXRlIHRyYW5zZmVyU3RhdGU/OiBUcmFuc2ZlclN0YXRlLFxuICAgIEBPcHRpb25hbCgpIEBJbmplY3QoQVBQX0lEKSBwcml2YXRlIGFwcElkPzogc3RyaW5nLFxuICApIHtcbiAgICBpZiAodHlwZW9mIG5nUmVuZGVyTW9kZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbmdSZW5kZXJNb2RlKSB7XG4gICAgICBuZ1JlbmRlck1vZGUgPSB7XG4gICAgICAgIGdldFNlcmlhbGl6ZWRTdGF0ZTogKCkgPT5cbiAgICAgICAgICB0aGlzLnRyYW5zZmVyU3RhdGUgPyBlc2NhcGVIdG1sKHRoaXMudHJhbnNmZXJTdGF0ZS50b0pzb24oKSkgOiB1bmRlZmluZWQsXG4gICAgICAgIGFwcElkOiB0aGlzLmFwcElkLFxuICAgICAgICBnZXRXaGVuU3RhYmxlOiAoKSA9PlxuICAgICAgICAgIHRoaXMuYXBwbGljYXRpb25SZWYuaXNTdGFibGVcbiAgICAgICAgICAgIC5waXBlKFxuICAgICAgICAgICAgICBmaWx0ZXIoKGlzU3RhYmxlKSA9PiBpc1N0YWJsZSksXG4gICAgICAgICAgICAgIHRha2UoMSksXG4gICAgICAgICAgICAgIG1hcFRvKHVuZGVmaW5lZCksXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAudG9Qcm9taXNlKCksXG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBmb3JSb290KCk6IE1vZHVsZVdpdGhQcm92aWRlcnM8UmVuZGVyZXJNb2R1bGU+IHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IFJlbmRlcmVyTW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIC4uLih0eXBlb2YgbmdSZW5kZXJNb2RlICE9PSAndW5kZWZpbmVkJyAmJiBuZ1JlbmRlck1vZGVcbiAgICAgICAgICA/IFtcbiAgICAgICAgICAgICAgeyBwcm92aWRlOiBQTEFURk9STV9JRCwgdXNlVmFsdWU6IFBMQVRGT1JNX1NFUlZFUl9JRCB9LFxuICAgICAgICAgICAgICB7IHByb3ZpZGU6IFNTUlN0eWxlc0hvc3QsIHVzZUNsYXNzOiBTU1JTdHlsZXNIb3N0LCBkZXBzOiBbRE9DVU1FTlQsIEFQUF9JRF0gfSxcbiAgICAgICAgICAgIF1cbiAgICAgICAgICA6IFt7IHByb3ZpZGU6IFNTUlN0eWxlc0hvc3QsIHVzZUNsYXNzOiBTU1JTdHlsZXNIb3N0LCBkZXBzOiBbRE9DVU1FTlRdIH1dKSxcbiAgICAgICAgeyBwcm92aWRlOiBTaGFyZWRTdHlsZXNIb3N0LCB1c2VFeGlzdGluZzogU1NSU3R5bGVzSG9zdCB9LFxuICAgICAgXSxcbiAgICB9O1xuICB9XG59XG5cbmZ1bmN0aW9uIGVzY2FwZUh0bWwodGV4dDogc3RyaW5nKTogc3RyaW5nIHtcbiAgY29uc3QgZXNjYXBlZFRleHQ6IHsgW2s6IHN0cmluZ106IHN0cmluZyB9ID0ge1xuICAgICcmJzogJyZhOycsXG4gICAgJ1wiJzogJyZxOycsXG4gICAgXCInXCI6ICcmczsnLFxuICAgICc8JzogJyZsOycsXG4gICAgJz4nOiAnJmc7JyxcbiAgfTtcblxuICByZXR1cm4gdGV4dC5yZXBsYWNlKC9bJlwiJzw+XS9nLCAocykgPT4gZXNjYXBlZFRleHRbc10pO1xufVxuIl19